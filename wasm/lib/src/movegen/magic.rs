use super::BitBoard;

pub const ROOK_MAGIC: [u64; 64] = [
    0x2280004000802410,
    0x2040400020001000,
    0x4080200080100109,
    0x300210010002c08,
    0x300100208010004,
    0xa900060881004400,
    0x1080320017000080,
    0x808010a100084080,
    0x1000800024844008,
    0xc381002104400080,
    0x1002000423100,
    0x101001000200900,
    0x2000820a60010,
    0x20488002014c0080,
    0x800200800100,
    0x2010000ba004100,
    0x1818000400064,
    0x500210040010082,
    0x810008010802000,
    0x5208008050018028,
    0x10828008001400,
    0x3010024001218,
    0x24010c0010020841,
    0x4054420000884421,
    0x201800100204108,
    0x20002480400082,
    0x808100080802000,
    0x4802100080800800,
    0x4c180100104500,
    0x26020080800400,
    0x8012030400063008,
    0x4080064200040081,
    0x400224008800880,
    0x8020802101004004,
    0x8100080802000,
    0x8084120042002008,
    0x4000801800800400,
    0x400020080802400,
    0x1002000402001811,
    0x8c4084a000091,
    0x2021400920908000,
    0x6008400481030060,
    0x102002080420018,
    0x8040234200320008,
    0x112140008008080,
    0x40002008080,
    0x8012208240010,
    0xc014084060009,
    0x800122470100,
    0x1008610080400500,
    0x402054120108200,
    0x8081000910006100,
    0x101005008000500,
    0x4000412008080,
    0x4005110810020400,
    0x40002100c0840200,
    0x1103020092208042,
    0x808320c0013101,
    0x1006083041002001,
    0x400205001000825,
    0x1008402080011,
    0x4200100b140842,
    0x908410010208008c,
    0x8000108ac804402,
];

pub const BISHOP_MAGIC: [u64; 64] = [
    0x122601114208080,
    0xc880210421020,
    0x88110c0404410002,
    0x14440280000829,
    0x2021088010000,
    0x10900420800520,
    0x8828080400d0,
    0x23d1022201244000,
    0x10a0885065820405,
    0x4000200901020280,
    0x5110a81800d08140,
    0x8404228004c0,
    0x110c0000082,
    0x28a10882a020d008,
    0x540020504200400,
    0x401102808410820c,
    0x20a098450040800,
    0x102000100a020840,
    0x1022000108010100,
    0x8404000202120000,
    0x41000820082020,
    0x9040020042200e,
    0x880400b0949410b0,
    0x201000041180100,
    0x4810420088020401,
    0x8084820050300,
    0x3008040088082760,
    0x2008008008440,
    0x8001005009004028,
    0x80589200010102a4,
    0x8410002092500,
    0x1044008028420092,
    0xc040480413002,
    0x4082a82004082604,
    0x62802080900080,
    0xc0020080080080,
    0x1040020200386280,
    0x20a11001000e0900,
    0x18580440008201,
    0x2104900020088,
    0x43a0901008101094,
    0xa26010420000300,
    0x30008a0804001200,
    0x1090884010400200,
    0x2010a4100c000284,
    0x2250020a888600,
    0x2280800884120,
    0x4404110046026b04,
    0xc00a009004100c04,
    0x8004445808280044,
    0x1001420b00880000,
    0xc00c2002420200c0,
    0x40002004242040,
    0x400c0448020000,
    0x45905030011140b0,
    0x5240404046204a1,
    0x40948410080c00,
    0x18000201040242c6,
    0x888001081481800,
    0x200000004840402,
    0x28040028202,
    0x804010024280,
    0x288810008200,
    0x402501002008020,
];

pub fn occupancy(idx: u64, attacks: BitBoard) -> BitBoard {
    let mut occ = BitBoard(0);
    let mut bb = attacks.0;
    let mut cnt = 0;
    while bb != 0 {
        let lsb = lsb_idx(BitBoard(bb));
        bb &= bb - 1;

        if (idx & (1 << cnt)) != 0 {
            occ.0 |= 1 << lsb;
        }
        cnt += 1;
    }
    occ
}

fn lsb_idx(bb: BitBoard) -> u32 {
    bb.0.trailing_zeros()
}
